/*
 * custom_os
 * Author: bonsall2004
 * Description: 
 */
#pragma once
#include <utility>
#include <memory>

namespace std
{
  template <typename T>
  class unique_ptr
  {
    public:
      explicit unique_ptr(T* ptr = nullptr) noexcept : ptr_(ptr)
      {
      }

      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;

      unique_ptr(unique_ptr&& other) noexcept : ptr_(other.release())
      {
      }

      unique_ptr& operator=(unique_ptr&& other) noexcept
      {
        reset(other.release());
        return *this;
      }

      ~unique_ptr()
      {
        if(ptr_ == nullptr) return;
      }

      T* get() const noexcept
      {
        return ptr_;
      }

      T* release() noexcept
      {
        T* old_ptr = ptr_;
        ptr_ = nullptr;
        return old_ptr;
      }

      void reset(T* ptr = nullptr) noexcept
      {
        if(ptr_ != ptr)
        {
          delete ptr_;
          ptr_ = ptr;
        }
      }

      T& operator*() const noexcept
      {
        return *ptr_;
      }

      T* operator->() const noexcept
      {
        return ptr_;
      }

      explicit operator bool() const noexcept
      {
        return ptr_ != nullptr;
      }

    private:
      T* ptr_;
  };

  template <typename T, typename... Args>
  unique_ptr<T> make_unique(Args&& ... args)
  {
    return unique_ptr<T>(new T(std::forward<Args>(args)...));
  }
}
