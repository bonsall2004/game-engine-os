/*
 * custom_os
 * Author: bonsall2004
 * Description: 
 */
#pragma once
#include <cstddef>
#include <memory>

namespace std
{
  template <typename T>
  class vector
  {
    public:
      vector() : data(nullptr), _size(0), _capacity(0)
      {
      }
      ~vector()
      {
        if(data)
        {
          free(data);
        }
      }

      void push_back(const T& value)
      {
        if(_size >= _capacity)
        {
          size_t new_capacity = (_capacity == 0) ? 1 : _capacity * 2;
          reallocate(new_capacity);
        }
        data[_size] = value;
        _size++;
      }

      void remove(size_t index)
      {
        if(index >= _size)
        {
          __asm__ volatile("int $40");
        }

        data[index].~T();
        for(size_t i = index; i < _size - 1; i++)
        {
          data[i] = data[i + 1];
        }
        _size--;
      }

      T& operator[](size_t index) const
      {
        if(index >= _size)
        {
          __asm__ volatile("int $40");
        }
        return data[index];
      }

      size_t size() const
      {
        return _size;
      }

      size_t capacity() const
      {
        return _capacity;
      }

      bool empty() const
      {
        return _size == 0;
      }

      void clear()
      {
        for(size_t i = 0; i < _size; i++)
        {
          data[i].~T();
        }
        _size = 0;
      }

    private:
      T* data;
      size_t _size;
      size_t _capacity;

      void reallocate(size_t new_capacity)
      {
        T* new_data = (T*)malloc(new_capacity * sizeof(T));
        if(!new_data)
        {
          __asm__ volatile("int $40");
          return;
        }

        for(size_t i = 0; i < _size; i++)
        {
          new_data[i] = data[i];
        }
        if(data != nullptr && _size != 0)
        {
          free(data);
        }

        data = new_data;
        _capacity = new_capacity;
      }
  };
}
