#pragma once
#include <type_traits>

namespace std
{
  using nullptr_t = decltype(nullptr);
  // std::move
  template <typename T>
  typename remove_reference<T>::type&& move(T&& t) noexcept
  {
    return static_cast<typename remove_reference<T>::type&&>(t);
  }

  // std::forward
  template <typename T>
  T&& forward(typename remove_reference<T>::type& t) noexcept
  {
    return static_cast<T&&>(t);
  }

  template <typename T>
  T&& forward(typename remove_reference<T>::type&& t) noexcept
  {
    static_assert(!is_lvalue_reference<T>::value, "Cannot forward an rvalue as an lvalue.");
    return static_cast<T&&>(t);
  }

  // std::swap
  template <typename T>
  void swap(T& a, T& b) noexcept
  {
    T temp = std::move(a);
    a = std::move(b);
    b = std::move(temp);
  }
}