#include <cstdint>
#include <cstddef>


namespace std{

template <typename T1, typename T2>
class Pair {
public:
    constexpr Pair() noexcept : first(), second() {}

    constexpr Pair(const T1& firstValue, const T2& secondValue) 
        : first(firstValue), second(secondValue) {}

    constexpr Pair(T1&& firstValue, T2&& secondValue) noexcept
        : first(std::move(firstValue)), second(std::move(secondValue)) {}

    constexpr Pair(const Pair& other) 
        : first(other.first), second(other.second) {}

    constexpr Pair(Pair&& other) noexcept 
        : first(std::move(other.first)), second(std::move(other.second)) {}

    Pair& operator=(const Pair& other) {
        if (this != &other) {
            first = other.first;
            second = other.second;
        }
        return *this;
    }

    Pair& operator=(Pair&& other) noexcept {
        if (this != &other) {
            first = std::move(other.first);
            second = std::move(other.second);
        }
        return *this;
    }

    ~Pair() = default;

    T1 first;
    T2 second;
};

} // namespace stl
